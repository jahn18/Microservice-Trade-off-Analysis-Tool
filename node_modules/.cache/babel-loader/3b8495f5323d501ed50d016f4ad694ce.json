{"ast":null,"code":"var _jsxFileName = \"/home/john/research/ReSeSS/Visualization/microservice-diff-tool/src/Pages/index.jsx\";\nimport React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect, useHistory, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FilePage = () => {\n  let fileReader;\n  let readFile = false;\n  let data;\n\n  const handleFileRead = e => {\n    const content = fileReader.result;\n\n    try {\n      data = JSON.parse(content);\n    } catch (err) {\n      alert(\"The file given is not JSON!\");\n    }\n  };\n\n  const handleFileChosen = file => {\n    fileReader = new FileReader();\n    fileReader.onloadend = handleFileRead;\n    fileReader.readAsText(file);\n  };\n\n  const fileRead = /*#__PURE__*/_jsxDEV(Link, {\n    to: {\n      pathname: \"/tool\",\n      state: data\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 22\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-file\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Input JSON File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"json-file\",\n      accept: \".json\",\n      onChange: e => handleFileChosen(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), readFile && fileRead]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_c = FilePage;\nexport default FilePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FilePage\");","map":{"version":3,"sources":["/home/john/research/ReSeSS/Visualization/microservice-diff-tool/src/Pages/index.jsx"],"names":["React","BrowserRouter","Router","Switch","Route","Link","Redirect","useHistory","useLocation","FilePage","fileReader","readFile","data","handleFileRead","e","content","result","JSON","parse","err","alert","handleFileChosen","file","FileReader","onloadend","readAsText","fileRead","pathname","state","target","files"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,aAAa,IAAIC,MADrB,EAEIC,MAFJ,EAGIC,KAHJ,EAIIC,IAJJ,EAKIC,QALJ,EAMIC,UANJ,EAOIC,WAPJ,QAQS,kBART;;;AAUA,MAAMC,QAAQ,GAAG,MAAM;AACnB,MAAIC,UAAJ;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,IAAJ;;AAEA,QAAMC,cAAc,GAAIC,CAAD,IAAO;AAC1B,UAAMC,OAAO,GAAGL,UAAU,CAACM,MAA3B;;AACA,QAAI;AACAJ,MAAAA,IAAI,GAAGK,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAP;AACH,KAFD,CAEE,OAAMI,GAAN,EAAW;AACTC,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACH;AAEJ,GARD;;AAUA,QAAMC,gBAAgB,GAAIC,IAAD,IAAU;AAC/BZ,IAAAA,UAAU,GAAG,IAAIa,UAAJ,EAAb;AACAb,IAAAA,UAAU,CAACc,SAAX,GAAuBX,cAAvB;AACAH,IAAAA,UAAU,CAACe,UAAX,CAAsBH,IAAtB;AACH,GAJD;;AAMA,QAAMI,QAAQ,gBAAG,QAAC,IAAD;AACG,IAAA,EAAE,EAAE;AACAC,MAAAA,QAAQ,EAAC,OADT;AAEAC,MAAAA,KAAK,EAAEhB;AAFP;AADP;AAAA;AAAA;AAAA;AAAA,UAAjB;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,EAAE,EAAC,WAFP;AAGI,MAAA,MAAM,EAAC,OAHX;AAII,MAAA,QAAQ,EAAGE,CAAC,IAAIO,gBAAgB,CAACP,CAAC,CAACe,MAAF,CAASC,KAAT,CAAe,CAAf,CAAD;AAJpC;AAAA;AAAA;AAAA;AAAA,YAFJ,EAQKnB,QAAQ,IAAIe,QARjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAxCD;;KAAMjB,Q;AA0CN,eAAeA,QAAf","sourcesContent":["import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    Redirect,\n    useHistory,\n    useLocation\n  } from \"react-router-dom\";\n\nconst FilePage = () => {\n    let fileReader;\n    let readFile = false; \n    let data;\n\n    const handleFileRead = (e) => {\n        const content = fileReader.result;\n        try {\n            data = JSON.parse(content);\n        } catch(err) {\n            alert(\"The file given is not JSON!\");\n        }\n        \n    };\n\n    const handleFileChosen = (file) => {\n        fileReader = new FileReader();\n        fileReader.onloadend = handleFileRead;\n        fileReader.readAsText(file);\n    };\n\n    const fileRead = <Link \n                        to={{\n                            pathname:\"/tool\",\n                            state: data\n                        }} \n                     />;\n\n    return(\n        <div className='upload-file'>\n            <h3>Input JSON File</h3>\n            <input \n                type=\"file\" \n                id=\"json-file\" \n                accept=\".json\" \n                onChange={ e => handleFileChosen(e.target.files[0])}\n            />\n            {readFile && fileRead}\n        </div>\n    );\n};\n\nexport default FilePage;"]},"metadata":{},"sourceType":"module"}