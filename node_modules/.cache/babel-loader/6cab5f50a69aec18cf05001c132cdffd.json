{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { types } from './types';\nimport { defaults } from './defaults';\nimport Cytoscape from 'cytoscape';\nimport { patch } from './patch';\n/**\n * The `CytoscapeComponent` is a React component that allows for the declarative creation\n * and modification of a Cytoscape instance, a graph visualisation.\n */\n\nexport default class CytoscapeComponent extends React.Component {\n  static get propTypes() {\n    return types;\n  }\n\n  static get defaultProps() {\n    return defaults;\n  }\n\n  static normalizeElements(elements) {\n    const isArray = elements.length != null;\n\n    if (isArray) {\n      return elements;\n    } else {\n      let {\n        nodes,\n        edges\n      } = elements;\n\n      if (nodes == null) {\n        nodes = [];\n      }\n\n      if (edges == null) {\n        edges = [];\n      }\n\n      return nodes.concat(edges);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.displayName = `CytoscapeComponent`;\n  }\n\n  componentDidMount() {\n    const container = ReactDOM.findDOMNode(this);\n    const {\n      global,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio\n    } = this.props;\n    const cy = this._cy = new Cytoscape({\n      container,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio\n    });\n\n    if (global) {\n      window[global] = cy;\n    }\n\n    this.updateCytoscape(null, this.props);\n  }\n\n  updateCytoscape(prevProps, newProps) {\n    const cy = this._cy;\n    const {\n      diff,\n      toJson,\n      get,\n      forEach\n    } = newProps;\n    patch(cy, prevProps, newProps, diff, toJson, get, forEach);\n\n    if (newProps.cy != null) {\n      newProps.cy(cy);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.updateCytoscape(prevProps, this.props);\n  }\n\n  componentWillUnmount() {\n    this._cy.destroy();\n  }\n\n  render() {\n    const {\n      id,\n      className,\n      style\n    } = this.props;\n    return /*#__PURE__*/React.createElement('div', {\n      id,\n      className,\n      style\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/john/research/ReSeSS/Visualization/microservice-diff-tool/src/Components/Cytoscape/component.js"],"names":["React","ReactDOM","types","defaults","Cytoscape","patch","CytoscapeComponent","Component","propTypes","defaultProps","normalizeElements","elements","isArray","length","nodes","edges","concat","constructor","props","displayName","componentDidMount","container","findDOMNode","global","headless","styleEnabled","hideEdgesOnViewport","textureOnViewport","motionBlur","motionBlurOpacity","wheelSensitivity","pixelRatio","cy","_cy","window","updateCytoscape","prevProps","newProps","diff","toJson","get","forEach","componentDidUpdate","componentWillUnmount","destroy","render","id","className","style","createElement"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { types } from './types';\nimport { defaults } from './defaults';\nimport Cytoscape from 'cytoscape';\nimport { patch } from './patch';\n\n/**\n * The `CytoscapeComponent` is a React component that allows for the declarative creation\n * and modification of a Cytoscape instance, a graph visualisation.\n */\nexport default class CytoscapeComponent extends React.Component {\n  static get propTypes() {\n    return types;\n  }\n\n  static get defaultProps() {\n    return defaults;\n  }\n\n  static normalizeElements(elements) {\n    const isArray = elements.length != null;\n\n    if (isArray) {\n      return elements;\n    } else {\n      let { nodes, edges } = elements;\n\n      if (nodes == null) {\n        nodes = [];\n      }\n\n      if (edges == null) {\n        edges = [];\n      }\n\n      return nodes.concat(edges);\n    }\n  }\n\n  constructor(props) {\n    super(props);\n    this.displayName = `CytoscapeComponent`;\n  }\n\n  componentDidMount() {\n    const container = ReactDOM.findDOMNode(this);\n\n    const {\n      global,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio\n    } = this.props;\n\n    const cy = (this._cy = new Cytoscape({\n      container,\n      headless,\n      styleEnabled,\n      hideEdgesOnViewport,\n      textureOnViewport,\n      motionBlur,\n      motionBlurOpacity,\n      wheelSensitivity,\n      pixelRatio\n    }));\n\n    if (global) {\n      window[global] = cy;\n    }\n\n    this.updateCytoscape(null, this.props);\n  }\n\n  updateCytoscape(prevProps, newProps) {\n    const cy = this._cy;\n    const { diff, toJson, get, forEach } = newProps;\n\n    patch(cy, prevProps, newProps, diff, toJson, get, forEach);\n\n    if (newProps.cy != null) {\n      newProps.cy(cy);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    this.updateCytoscape(prevProps, this.props);\n  }\n\n  componentWillUnmount() {\n    this._cy.destroy();\n  }\n\n  render() {\n    const { id, className, style } = this.props;\n\n    return React.createElement('div', {\n      id,\n      className,\n      style\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}